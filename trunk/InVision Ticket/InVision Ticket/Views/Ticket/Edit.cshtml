 @model InVision_Ticket.ViewModels.TicketViewModel
@using InVision_Ticket.Utilities
@using System.Linq
@{
    ViewBag.Title = "Edit Ticket: " + Model.TicketID;
}

<h2>Edit</h2>


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Ticket</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.TicketID)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.TicketID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Summary)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Summary)
            @Html.ValidationMessageFor(model => model.Summary)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Details)
        </div>
            
        <div class="editor-field">
            <div class="mdd_preview" id="details_preview">@Model.Details</div>
            <a id="mdd_link" href="javascript:void(0)" onclick="toggleDetailsEdit();">+ Edit Details</a>
            <div class="mdd_toolbar" id="details_toolbar"></div>
            @Html.TextAreaFor(model => model.DetailsMarkDown, new { @class = "mdd_editor", @id = "details_textarea"})
		    <div class="mdd_resizer" id="details_resizer"></div>
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CreatedDateTime)

        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.CreatedDateTime)
            <br />
            @Html.Raw(TimeAgo.getStringTime(Model.CreatedDateTime))
        </div>



        <div class="editor-label">
            @Html.LabelFor(model => model.Priority)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Priority)
            @Html.ValidationMessageFor(model => model.Priority)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.TicketType)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.TicketTypeID, new SelectList(Model.TicketTypeList, "TicketTypeID", "TicketType1"))
            @Html.ValidationMessageFor(model => model.TicketType)
        </div>


        @if (Model.LastModifiedDateTime.HasValue)
        { 
            <div class="editor-label">
            Html.LabelFor(model => model.LastModifiedDateTime)
            </div>
            <div class="editor-field">
            Html.DisplayFor(model => model.LastModifiedDateTime)
            <br />
            Html.Raw(TimeAgo.getStringTime(Model.LastModifiedDateTime.Value));
            </div>
        }

        @if (Model.ResolvedDateTime.HasValue)
        {
            <div class="editor-label">
                Html.LabelFor(model => model.ResolvedDateTime)
            </div>
            <div class="editor-field">
                Html.DisplayFor(model => model.ResolvedDateTime)
                Html.Raw(TimeAgo.getStringTime(Model.ResolvedDateTime.Value));
            </div>
        }
        
        @if (Model.LastModifiedBy.HasValue)
        {
            <div class="editor-label">
                @Html.LabelFor(model => model.LastModifiedBy)
            </div>
            <div class="editor-field">
                @Html.DisplayFor(model => model.LastModifiedBy)
            </div>
        }

        <div class="editor-label">
            @Html.LabelFor(model => model.Location.StoreLocation)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Location.LocationID, new SelectList(Model.LocationList, "LocationID", "StoreLocation"))
            @Html.ValidationMessageFor(model => model.Location)
        </div>


        <div class="system-info editor-field">
            <div class="system-info-toggle-link">
                <a id="system-info-toggle-link" href="javascript:void(0)" onclick="toggleSystemDiv();">+ System Info</a>
            </div> 
            <div id="system-info-toggle" class="system-info-toggle">

                <div class="editor-label">
                    @Html.LabelFor(model => model.System.SystemID)
                </div>
                <div class="editor-field">
                    @Html.DisplayFor(model => model.System.SystemID)
                </div>
                <div class="editor-field">
                    @Html.DisplayFor(model => model.System.Desciption)
                </div>
            </div>
        </div>
     
        <div class="editor-label">
            @Html.LabelFor(model => model.SalesLogin.DisplayName)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.SalesLogin.LoginID, new SelectList(Model.LoginList, "LoginID", "DisplayName"))
            @Html.ValidationMessageFor(model => model.SalesLogin)
        </div>

       <div class="editor-label">
            @Html.LabelFor(model => model.TechLogin.DisplayName)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.TechLogin.LoginID, new SelectList(Model.LoginList, "LoginID", "DisplayName"))
            @Html.ValidationMessageFor(model => model.TechLogin)
        </div>


        @{
        if (Model.CreatedByCustomer)
        {
            Html.Raw("<div class=\"editor-field\"> Ticket created online by customer.</div>");


        }
        else
        { 
                <div class="editor-label">
                    @Html.LabelFor(model => model.CreatedByLogin)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.CreatedByLogin)
                    @Html.ValidationMessageFor(model => model.CreatedByLogin)
                </div>
        }
        }


        @{
        if (Model.BusinessCustomer)
        { 
                <div class="editor-label">
                    @Html.LabelFor(model => model.BusinessName)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.BusinessName)
                    @Html.ValidationMessageFor(model => model.BusinessName)
                </div>
    
        }    
            
        }
        <div class="editor-label">
            @Html.LabelFor(model => model.CustomerContactName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CustomerContactName)
            @Html.ValidationMessageFor(model => model.CustomerContactName)
        </div>



        <div class="editor-label">
            @Html.LabelFor(model => model.Phone)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Phone)
            @Html.ValidationMessageFor(model => model.Phone)
        </div>
        @Html.ActionLink("Customer Information", "Details", "Customer", new { id = Model.CustomerContactID }, new { target = "_blank" })
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
   @* <fieldset>
        <legend>Updates</legend>

        @foreach (var update in Model.Updates)
        { 
            <div class ="editor-label">
                @Html.Raw("<h3>" + update.Login.DisplayName + "</h3>");
                @Html.Raw(update.Comment)
            </div>       
        }
    </fieldset>*@
    
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



<script type="text/javascript">
    function toggleSystemDiv()
    {
        var div = document.getElementById("system-info-toggle");
        var link = document.getElementById("system-info-toggle-link");
        if (div.style.display == "block") {
            div.style.display = "none";
            link.innerHTML = "+ System Info";
        }
        else
        {
            div.style.display = "block";
            link.innerHTML = "- System Info";
        }

    }
    function toggleDetailsEdit() {
        var text = document.getElementById("details_textarea");
        var resize = document.getElementById("details_resizer");
        var toolbar = document.getElementById("details_toolbar");
        var link = document.getElementById("mdd_link");

        if (text.style.display == "block") {
            text.style.display = "none";
            resize.style.display = "none";
            toolbar.style.display = "none";

            link.innerHTML = "+ Edit Details";
        }
        else {
            text.style.display = "block";
            resize.style.display = "block";
            toolbar.style.display = "block";
            link.innerHTML = "- Edit Details";
        }

    }
</script>


<script type="text/javascript">
    $("textarea.mdd_editor").MarkdownDeep({
        help_location: "~/Content/mdd_help.html",

    });
</script>